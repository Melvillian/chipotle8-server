/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./frontend/lib/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./frontend/lib/image.ts":
/*!*******************************!*\
  !*** ./frontend/lib/image.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NUM_BYTES_IN_RGBA = 4;
exports.initializeImage = function (imageData, width, height) {
    for (var x = 0; x < width; x++) {
        for (var y = 0; y < height; y++) {
            writeRGBAValue(imageData, x, y, width, false);
        }
    }
};
var getIndex = function (x, y, width) {
    return (y * width + x) * NUM_BYTES_IN_RGBA;
};
exports.updateCanvasImageData = function (imageData, change, width, widthMultiplier, heightMultiplier) {
    var chipX = change.x, chipY = change.y, isAlive = change.isAlive;
    for (var _i = 0, _a = getCanvasChangesFromChange(chipX, chipY, width, widthMultiplier, heightMultiplier); _i < _a.length; _i++) {
        var canvasChange = _a[_i];
        var x = canvasChange.x, y = canvasChange.y;
        writeRGBAValue(imageData, x, y, width, isAlive);
    }
};
var getCanvasChangesFromChange = function (chipX, chipY, width, widthMultiplier, heightMultiplier) {
    var canvasChanges = [];
    var startingX = chipX * widthMultiplier;
    var startingY = chipY * heightMultiplier * width;
    console.log("chipX: " + chipX + ", chipY: " + chipY);
    for (var w = 0; w < widthMultiplier; w++) {
        for (var h = 0; h < heightMultiplier; h++) {
            var x = startingX + w;
            var y = startingY + h * width;
            canvasChanges.push({ x: x, y: y });
        }
    }
    console.log("canvasChanges: " + JSON.stringify(canvasChanges));
    return canvasChanges;
};
var writeRGBAValue = function (imageData, x, y, width, isWhite) {
    var pixelIndex = getIndex(x, y, width);
    var pixelValue = isWhite ? 255 : 0;
    imageData.data[pixelIndex + 0] ^= pixelValue;
    imageData.data[pixelIndex + 1] ^= pixelValue;
    imageData.data[pixelIndex + 2] ^= pixelValue;
    imageData.data[pixelIndex + 3] = 255;
};


/***/ }),

/***/ "./frontend/lib/index.ts":
/*!*******************************!*\
  !*** ./frontend/lib/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MyWorker = __webpack_require__(/*! worker-loader?name=[name].js!./worker */ "./node_modules/worker-loader/dist/cjs.js?name=[name].js!./frontend/lib/worker.ts");
var image_1 = __webpack_require__(/*! ./image */ "./frontend/lib/image.ts");
var worker = new MyWorker();
window.onload = function () {
    var canvas = document.getElementById("game-of-life-canvas");
    var context = canvas.getContext("2d");
    var CHIP_8_WIDTH = 64;
    var CHIP_8_HEIGHT = 32;
    var widthMultiplier = Math.floor(canvas.width / CHIP_8_WIDTH);
    var heightMultiplier = Math.floor(canvas.height / CHIP_8_HEIGHT);
    var width = CHIP_8_WIDTH * widthMultiplier;
    var height = CHIP_8_HEIGHT * heightMultiplier;
    var imageData = context === null || context === void 0 ? void 0 : context.createImageData(width, height);
    console.log("height: " + height + " width: " + width);
    console.log("canvas height: " + canvas.height + " canvas width: " + canvas.width);
    console.log("heightMultiplier: " + heightMultiplier);
    console.log("widthMultiplier: " + widthMultiplier);
    var shouldPrint = true;
    worker.onmessage = function (evt) {
        var change = evt.data;
        var before = new Uint8ClampedArray(0);
        if (shouldPrint) {
            console.log("updating with change " + JSON.stringify(change));
            before = imageData.data.slice();
        }
        image_1.updateCanvasImageData(imageData, change, width, widthMultiplier, heightMultiplier);
        if (shouldPrint) {
            shouldPrint = false;
            for (var i = 0; i < imageData.data.length; i++) {
                if (imageData.data[i] !== before[i]) {
                    console.log("discrepancy. i: " + i + ", before: " + before[i] + ", after: " + imageData.data[i]);
                }
            }
        }
    };
    image_1.initializeImage(imageData, width, height);
    function main(tframe) {
        window.requestAnimationFrame(main);
        context === null || context === void 0 ? void 0 : context.putImageData(imageData, 0, 0);
    }
    main(0);
};


/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?name=[name].js!./frontend/lib/worker.ts":
/*!****************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?name=[name].js!./frontend/lib/worker.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "worker.js");
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,