/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/ts-loader/index.js!./frontend/lib/worker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./frontend/lib/messaging.ts":
/*!***********************************!*\
  !*** ./frontend/lib/messaging.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var messageTypes = ["disconnect", "displaychange", "keydown", "keyup"];
var displayChangeExample = [{ x: 0, y: 0, isAlive: true }];
var MessageType;
(function (MessageType) {
    MessageType["Disconnect"] = "disconnect";
    MessageType["DisplayChange"] = "displaychange";
    MessageType["KeyDown"] = "keydown";
    MessageType["KeyUp"] = "keyup";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var KeyMessage = (function () {
    function KeyMessage(isUp, key) {
        this.keyType = isUp ? MessageType.KeyUp : MessageType.KeyDown;
        this.key = key;
    }
    KeyMessage.prototype.type = function () {
        return this.keyType;
    };
    KeyMessage.prototype.toJSON = function () {
        return JSON.stringify({ type: this.type(), key: this.key });
    };
    return KeyMessage;
}());
exports.KeyMessage = KeyMessage;
var DisconnectMessage = (function () {
    function DisconnectMessage(data) {
        if (data.type !== "disconnect" || typeof data.userId !== "number") {
            throw new Error("bad data passed to DisconnectMessage constructor " + data);
        }
        this.userId = data.userId;
    }
    DisconnectMessage.prototype.type = function () {
        return MessageType.Disconnect;
    };
    DisconnectMessage.prototype.toJSON = function () {
        return JSON.stringify({ type: this.type(), userId: this.userId });
    };
    return DisconnectMessage;
}());
exports.DisconnectMessage = DisconnectMessage;
var DisplayChangeMessage = (function () {
    function DisplayChangeMessage(data) {
        if (data.type !== "displaychange" ||
            typeof data.changes !== typeof displayChangeExample) {
            throw new Error("bad data passed to DisplayChangeMessage constructor " + data);
        }
        this.changes = data.changes;
    }
    DisplayChangeMessage.prototype.type = function () {
        return MessageType.DisplayChange;
    };
    DisplayChangeMessage.prototype.toJSON = function () {
        return JSON.stringify({ type: this.type(), changes: this.changes });
    };
    return DisplayChangeMessage;
}());
exports.DisplayChangeMessage = DisplayChangeMessage;
function parseServerMsg(rawData) {
    var data = JSON.parse(rawData);
    switch (data.type) {
        case "disconnect": {
            return new DisconnectMessage(data);
        }
        case "displaychange": {
            return new DisplayChangeMessage(data);
        }
        default: {
            throw new Error("incorrect Message passed to handleMessage: " + data);
        }
    }
}
exports.parseServerMsg = parseServerMsg;
function sendKeyUpMsg(socket, key) {
    var msg = new KeyMessage(true, key);
    socket.send(msg.toJSON());
}
exports.sendKeyUpMsg = sendKeyUpMsg;
function sendKeyDownMsg(socket, key) {
    var msg = new KeyMessage(false, key);
    socket.send(msg.toJSON());
}
exports.sendKeyDownMsg = sendKeyDownMsg;


/***/ }),

/***/ "./node_modules/ts-loader/index.js!./frontend/lib/worker.ts":
/*!*********************************************************!*\
  !*** ./node_modules/ts-loader!./frontend/lib/worker.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var messaging_1 = __webpack_require__(/*! ./messaging */ "./frontend/lib/messaging.ts");
console.log("starting worker");
var DOMAIN = "localhost:3000/";
var socket = new WebSocket("ws://" + DOMAIN + "echo");
socket.onopen = onConnect;
socket.onmessage = onMessage;
function onConnect(event) {
    console.log("connected to websocket server at " + DOMAIN);
}
var ctx = self;
function onMessage(event) {
    var parsed = messaging_1.parseServerMsg(event.data);
    if (parsed.type() === messaging_1.MessageType.Disconnect) {
        console.log("received disconnect");
        var msg = parsed;
    }
    else if (parsed.type() === messaging_1.MessageType.DisplayChange) {
        var msg = parsed;
        for (var _i = 0, _a = msg.changes; _i < _a.length; _i++) {
            var change = _a[_i];
            ctx.postMessage(change);
        }
    }
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,